{"version":3,"sources":["../../lib/Responder.js"],"names":["EventEmitter","require","EventEmitter2","util","Discovery","Configurable","Monitorable","Component","axon","module","exports","advertisement","discoveryOptions","on","obj","sock","RepSocket","connect","port","Responder","useHostNames","hostName","address","set","emit","req","cb","type"],"mappings":";;;;;;;;;;AAAA,IAAIA,eAAeC,QAAQ,eAAR,EAAyBC,aAA5C;AAAA,IACIC,OAAOF,QAAQ,MAAR,CADX;AAAA,IAEIG,YAAYH,QAAQ,aAAR,CAFhB;AAAA,IAGII,eAAeJ,QAAQ,gBAAR,CAHnB;AAAA,IAIIK,cAAcL,QAAQ,eAAR,CAJlB;AAAA,IAKIM,YAAYN,QAAQ,aAAR,CALhB;AAAA,IAMIO,OAAOP,QAAQ,gBAAR,CANX;;AAQAQ,OAAOC,OAAP;AAAA;;AACI,uBAAYC,aAAZ,EAA2BC,gBAA3B,EAA6C;AAAA;;AAAA,0HACnCD,aADmC,EACpBC,gBADoB;;AAGzC,cAAKC,EAAL,CAAQ,OAAR,EAAiB,eAAO;AACpBC,gBAAIC,IAAJ,GAAW,IAAIP,KAAKQ,SAAT,EAAX;AACAF,gBAAIC,IAAJ,CAASE,OAAT,CAAiBH,IAAIH,aAAJ,CAAkBO,IAAnC,EAAyCC,UAAUC,YAAV,GAAyBN,IAAIO,QAA7B,GAAwCP,IAAIQ,OAArF;AACAR,gBAAIC,IAAJ,CAASQ,GAAT,CAAa,eAAb,EAA8B,CAA9B;;AAEAT,gBAAIC,IAAJ,CAASF,EAAT,CAAY,cAAZ,EAA4B;AAAA,uBAAK,MAAKW,IAAL,CAAU,SAAV,EAAqBV,GAArB,CAAL;AAAA,aAA5B;;AAEAA,gBAAIC,IAAJ,CAASF,EAAT,CAAY,SAAZ,EAAuB,UAACY,GAAD,EAAMC,EAAN;AAAA,uBAAaD,IAAIE,IAAJ,IAAY,MAAKH,IAAL,CAAUC,IAAIE,IAAd,EAAoBF,GAApB,EAAyBC,EAAzB,CAAzB;AAAA,aAAvB;AACH,SARD;AAHyC;AAY5C;;AAbL;AAAA;AAAA,4BAee;AAAE,mBAAO,KAAP;AAAe;AAfhC;AAAA;AAAA,4BAgBe;AAAE,mBAAO,KAAP;AAAe;AAhBhC;;AAAA;AAAA,EAAyCpB,YAAYD,aAAaE,SAAb,CAAZ,CAAzC","file":"Responder.js","sourcesContent":["var EventEmitter = require('eventemitter2').EventEmitter2,\n    util = require('util'),\n    Discovery = require('./Discovery'),\n    Configurable = require('./Configurable'),\n    Monitorable = require('./Monitorable'),\n    Component = require('./Component'),\n    axon = require('@dashersw/axon');\n\nmodule.exports = class Responder extends Monitorable(Configurable(Component)) {\n    constructor(advertisement, discoveryOptions) {\n        super(advertisement, discoveryOptions);\n\n        this.on('added', obj => {\n            obj.sock = new axon.RepSocket();\n            obj.sock.connect(obj.advertisement.port, Responder.useHostNames ? obj.hostName : obj.address);\n            obj.sock.set('retry timeout', 0);\n\n            obj.sock.on('socket close', _ => this.emit('removed', obj));\n\n            obj.sock.on('message', (req, cb) => req.type && this.emit(req.type, req, cb));\n        });\n    }\n\n    get type() { return 'rep'; }\n    get oppo() { return 'req'; }\n}\n"]}