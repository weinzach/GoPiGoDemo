{"version":3,"sources":["../../lib/Publisher.js"],"names":["EventEmitter","require","EventEmitter2","util","Configurable","Component","axon","portfinder","module","exports","advertisement","discoveryOptions","axon_type","host","address","onPort","err","port","sock","PubEmitterSocket","bind","server","on","code","getPort","emit","topic","data","namespace"],"mappings":";;;;;;;;;;AAAA,IAAIA,eAAeC,QAAQ,eAAR,EAAyBC,aAA5C;AAAA,IACIC,OAAOF,QAAQ,MAAR,CADX;AAAA,IAEIG,eAAeH,QAAQ,gBAAR,CAFnB;AAAA,IAGII,YAAYJ,QAAQ,aAAR,CAHhB;AAAA,IAIIK,OAAOL,QAAQ,gBAAR,CAJX;AAAA,IAKIM,aAAaN,QAAQ,YAAR,CALjB;;AAOAO,OAAOC,OAAP;AAAA;;AACI,uBAAYC,aAAZ,EAA2BC,gBAA3B,EAA6C;AAAA;;AAAA,0HACnCD,aADmC,EACpBC,gBADoB;;AAGzC,cAAKD,aAAL,CAAmBE,SAAnB,GAA+B,aAA/B;;AAEA,YAAIC,OAAO,MAAKF,gBAAL,IAAyB,MAAKA,gBAAL,CAAsBG,OAA/C,IAA0D,SAArE;;AAEA,YAAIC,SAAS,SAATA,MAAS,CAACC,GAAD,EAAMC,IAAN,EAAe;AACxB,kBAAKP,aAAL,CAAmBO,IAAnB,GAA0B,CAACA,IAA3B;;AAEA,kBAAKC,IAAL,GAAY,IAAIZ,KAAKa,gBAAT,EAAZ;AACA,kBAAKD,IAAL,CAAUA,IAAV,CAAeE,IAAf,CAAoBH,IAApB;AACA,kBAAKC,IAAL,CAAUA,IAAV,CAAeG,MAAf,CAAsBC,EAAtB,CAAyB,OAAzB,EAAkC,eAAO;AACrC,oBAAIN,IAAIO,IAAJ,IAAY,YAAhB,EAA8B,MAAMP,GAAN;;AAE9BT,2BAAWiB,OAAX,CAAmB,EAAEX,MAAMA,IAAR,EAAcI,MAAM,MAAKP,aAAL,CAAmBO,IAAvC,EAAnB,EAAkEF,MAAlE;AACH,aAJD;;AAMA,kBAAKG,IAAL,CAAUA,IAAV,CAAeI,EAAf,CAAkB,MAAlB,EAA0B;AAAA,uBAAK,MAAKG,IAAL,CAAU,OAAV,EAAmB,MAAKP,IAAxB,CAAL;AAAA,aAA1B;AACH,SAZD;;AAcAX,mBAAWiB,OAAX,CAAmB,EAAEX,MAAMA,IAAR,EAAcI,MAAM,MAAKP,aAAL,CAAmBO,IAAvC,EAAnB,EAAkEF,MAAlE;AArByC;AAsB5C;;AAvBL;AAAA;AAAA,gCAyBYW,KAzBZ,EAyBmBC,IAzBnB,EAyByB;AACjB,gBAAIC,YAAY,EAAhB;;AAEA,gBAAI,KAAKlB,aAAL,CAAmBkB,SAAvB,EACIA,YAAY,KAAKlB,aAAL,CAAmBkB,SAAnB,GAA+B,IAA3C;;AAEJF,oBAAQ,cAAcE,SAAd,GAA0BF,KAAlC;;AAEA,iBAAKR,IAAL,IAAa,KAAKA,IAAL,CAAUO,IAAV,CAAeC,KAAf,EAAsBC,IAAtB,CAAb;AACH;AAlCL;AAAA;AAAA,4BAoCe;AAAE,mBAAO,aAAP;AAAuB;AApCxC;AAAA;AAAA,4BAqCe;AAAE,mBAAO,aAAP;AAAuB;AArCxC;;AAAA;AAAA,EAAyCvB,aAAaC,SAAb,CAAzC","file":"Publisher.js","sourcesContent":["var EventEmitter = require('eventemitter2').EventEmitter2,\n    util = require('util'),\n    Configurable = require('./Configurable'),\n    Component = require('./Component'),\n    axon = require('@dashersw/axon'),\n    portfinder = require('portfinder');\n\nmodule.exports = class Publisher extends Configurable(Component) {\n    constructor(advertisement, discoveryOptions) {\n        super(advertisement, discoveryOptions);\n\n        this.advertisement.axon_type = 'pub-emitter';\n\n        var host = this.discoveryOptions && this.discoveryOptions.address || '0.0.0.0';\n\n        var onPort = (err, port) => {\n            this.advertisement.port = +port;\n\n            this.sock = new axon.PubEmitterSocket();\n            this.sock.sock.bind(port);\n            this.sock.sock.server.on('error', err => {\n                if (err.code != 'EADDRINUSE') throw err;\n\n                portfinder.getPort({ host: host, port: this.advertisement.port }, onPort);\n            });\n\n            this.sock.sock.on('bind', _ => this.emit('ready', this.sock));\n        }\n\n        portfinder.getPort({ host: host, port: this.advertisement.port }, onPort);\n    }\n\n    publish(topic, data) {\n        var namespace = '';\n\n        if (this.advertisement.namespace)\n            namespace = this.advertisement.namespace + '::';\n\n        topic = 'message::' + namespace + topic;\n\n        this.sock && this.sock.emit(topic, data);\n    };\n\n    get type() { return 'pub-emitter'; }\n    get oppo() { return 'sub-emitter'; }\n}\n"]}