'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _logSuppress = require('log-suppress');

var _logSuppress2 = _interopRequireDefault(_logSuppress);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cote = require('..')();
// LogSuppress.init(console);

_ava2.default.cb('classic publisher / subscriber', function (t) {
    var key = 'test 1';

    var publisher = new cote.Publisher({ name: 'publisher', key: key });
    var subscriber = new cote.Subscriber({ name: 'subscriber', key: key });

    publisher.on('ready', function () {
        subscriber.on('connect', function (_) {
            publisher.publish('test', { args: [1, 2, 3] });
        });
    });

    subscriber.on('test', function (req) {
        console.log('def', req);

        t.deepEqual(req.args, [1, 2, 3], 'Arguments should have been [1, 2, 3]');
        t.end();
    });
});

_ava2.default.cb('Environment test', function (t) {
    var key = 'test 2';

    var cote = require('..')({ environment: 'test' });

    var publisher = new cote.Publisher({ name: 'publisher', key: key });
    var subscriber = new cote.Subscriber({ name: 'subscriber', key: key });

    publisher.on('ready', function () {
        subscriber.on('connect', function (_) {
            publisher.publish('test', { args: [1, 2, 4] });
        });
    });

    subscriber.on('test', function (req) {
        console.log('env', req);

        t.deepEqual(req.args, [1, 2, 4], 'Arguments should have been [1, 2, 4]');
        t.is(cote.Publisher.environment, 'test:');
        t.end();
    });
});

_ava2.default.cb('Namespace test', function (t) {
    var key = 'test 2';
    var namespace = 'ns';

    var cote = require('..')({ environment: 'test' });

    var publisher = new cote.Publisher({ name: 'publisher', key: key, namespace: namespace });
    var subscriber = new cote.Subscriber({ name: 'subscriber', key: key, namespace: namespace });

    publisher.on('ready', function () {
        subscriber.on('connect', function (_) {
            publisher.publish('test', { args: [1, 2, 5] });
        });
    });

    subscriber.on('test', function (req) {
        console.log('ns', req);
        t.deepEqual(req.args, [1, 2, 5], 'Arguments should have been [1, 2, 5]');
        t.is(cote.Publisher.environment, 'test:');
        t.end();
    });
});
//# sourceMappingURL=publish-subscribe.js.map