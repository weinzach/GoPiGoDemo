{"version":3,"sources":["../../test/request-response.js"],"names":["cote","require","init","console","cb","key","requester","Requester","name","responder","Responder","on","send","type","args","t","deepEqual","req","end","environment","is"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA,IAAIA,OAAOC,QAAQ,IAAR,GAAX;;AAEA,sBAAYC,IAAZ,CAAiBC,OAAjB;;AAEA,cAAKC,EAAL,CAAQ,6BAAR,EAAuC,aAAK;AACxC,QAAIC,MAAM,QAAV;;AAEA,QAAIC,YAAY,IAAIN,KAAKO,SAAT,CAAmB,EAAEC,MAAM,WAAR,EAAqBH,QAArB,EAAnB,CAAhB;AACA,QAAII,YAAY,IAAIT,KAAKU,SAAT,CAAmB,EAAEF,MAAM,WAAR,EAAqBH,QAArB,EAAnB,CAAhB;;AAEAC,cAAUK,EAAV,CAAa,OAAb,EAAsB,YAAM;AACxBL,kBAAUM,IAAV,CAAe,EAAEC,MAAM,MAAR,EAAgBC,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAtB,EAAf;AACH,KAFD;;AAIAL,cAAUE,EAAV,CAAa,MAAb,EAAqB,eAAO;AACxBI,UAAEC,SAAF,CAAYC,IAAIH,IAAhB,EAAsB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAtB,EAAiC,sCAAjC;AACAC,UAAEG,GAAF;AACH,KAHD;AAIH,CAdD;;AAiBA,cAAKd,EAAL,CAAQ,kBAAR,EAA4B,aAAK;AAC7B,QAAIC,MAAM,QAAV;;AAEA,QAAIL,OAAOC,QAAQ,IAAR,EAAc,EAACkB,aAAa,MAAd,EAAd,CAAX;;AAEA,QAAIb,YAAY,IAAIN,KAAKO,SAAT,CAAmB,EAAEC,MAAM,WAAR,EAAqBH,QAArB,EAAnB,CAAhB;AACA,QAAII,YAAY,IAAIT,KAAKU,SAAT,CAAmB,EAAEF,MAAM,WAAR,EAAqBH,QAArB,EAAnB,CAAhB;;AAEAC,cAAUK,EAAV,CAAa,OAAb,EAAsB,YAAM;AACxBL,kBAAUM,IAAV,CAAe,EAAEC,MAAM,MAAR,EAAgBC,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAtB,EAAf;AACH,KAFD;;AAIAL,cAAUE,EAAV,CAAa,MAAb,EAAqB,eAAO;AACxBI,UAAEC,SAAF,CAAYC,IAAIH,IAAhB,EAAsB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAtB,EAAiC,sCAAjC;AACAC,UAAEK,EAAF,CAAKpB,KAAKO,SAAL,CAAeY,WAApB,EAAiC,OAAjC;AACAJ,UAAEG,GAAF;AACH,KAJD;AAKH,CAjBD","file":"request-response.js","sourcesContent":["import test from 'ava';\nimport LogSuppress from 'log-suppress';\n\nvar cote = require('..')();\n\nLogSuppress.init(console);\n\ntest.cb('classic request / responder', t => {\n    var key = 'test 1';\n\n    var requester = new cote.Requester({ name: 'requester', key });\n    var responder = new cote.Responder({ name: 'responder', key });\n\n    requester.on('ready', () => {\n        requester.send({ type: 'test', args: [1, 2, 3] });\n    });\n\n    responder.on('test', req => {\n        t.deepEqual(req.args, [1, 2, 3], 'Arguments should have been [1, 2, 3]');\n        t.end();\n    });\n});\n\n\ntest.cb('Environment test', t => {\n    var key = 'test 2';\n\n    var cote = require('..')({environment: 'test'});\n\n    var requester = new cote.Requester({ name: 'requester', key });\n    var responder = new cote.Responder({ name: 'responder', key });\n\n    requester.on('ready', () => {\n        requester.send({ type: 'test', args: [1, 2, 3] });\n    });\n\n    responder.on('test', req => {\n        t.deepEqual(req.args, [1, 2, 3], 'Arguments should have been [1, 2, 3]');\n        t.is(cote.Requester.environment, 'test:');\n        t.end();\n    });\n});\n"]}