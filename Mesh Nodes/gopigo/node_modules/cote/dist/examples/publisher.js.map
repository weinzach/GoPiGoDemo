{"version":3,"sources":["../../examples/publisher.js"],"names":["Publisher","require","randomPublisher","name","on","setInterval","val","Math","random","console","log","publish"],"mappings":";;AAAA,IAAIA,YAAYC,QAAQ,KAAR,EAAeD,SAA/B;;AAEA;AACA,IAAIE,kBAAkB,IAAIF,SAAJ,CAAc;AAChCG,UAAM;AAD0B,CAAd,CAAtB;;AAMA;AACAD,gBAAgBE,EAAhB,CAAmB,OAAnB,EAA4B,YAAW;AACnCC,gBAAY,YAAW;AACnB,YAAIC,MAAM;AACNA,iBAAK,CAAC,EAAEC,KAAKC,MAAL,KAAgB,IAAlB;AADA,SAAV;;AAIAC,gBAAQC,GAAR,CAAY,UAAZ,EAAwBJ,GAAxB;;AAEA;AACAJ,wBAAgBS,OAAhB,CAAwB,cAAxB,EAAwCL,GAAxC;AACH,KATD,EASG,IATH;AAUH,CAXD","file":"publisher.js","sourcesContent":["var Publisher = require('../').Publisher;\n\n// Instantiate a new Publisher component.\nvar randomPublisher = new Publisher({\n    name: 'randomPub',\n    // namespace: 'rnd',\n    // broadcasts: ['randomUpdate']\n});\n\n// Wait for the publisher to find an open port and listen on it.\nrandomPublisher.on('ready', function() {\n    setInterval(function() {\n        var val = {\n            val: ~~(Math.random() * 1000)\n        };\n\n        console.log('emitting', val);\n\n        // publish an event with arbitrary data at any time\n        randomPublisher.publish('randomUpdate', val);\n    }, 3000);\n});\n"]}