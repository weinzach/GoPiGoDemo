'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

module.exports = function (Base) {
    return function (_Base) {
        _inherits(Monitorable, _Base);

        function Monitorable() {
            var _ref;

            _classCallCheck(this, Monitorable);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            var _this = _possibleConstructorReturn(this, (_ref = Monitorable.__proto__ || Object.getPrototypeOf(Monitorable)).call.apply(_ref, [this].concat(args)));

            _this.discovery.on('added', function (obj) {
                var adv = obj.advertisement;

                if (adv.type != 'monitor') return;

                if (adv.key && adv.key != _this.advertisement.key) return;

                var statusPublisher = new axon.PubEmitterSocket();
                statusPublisher.connect(adv.port, _this.constructor.useHostNames ? obj.hostName : obj.address);
                var statusInterval = _this.discoveryOptions && _this.discoveryOptions.statusInterval || 5000;

                setInterval(function (_) {
                    return _this.onInterval();
                }, statusInterval);
            });
            return _this;
        }

        _createClass(Monitorable, [{
            key: 'onInterval',
            value: function onInterval() {
                var nodes = [];

                for (var id in this.discovery.nodes) {
                    var node = this.discovery.nodes[id];

                    if (node.sock) nodes.push(id);
                }

                statusPublisher.emit('status', {
                    id: this.discovery.me.id,
                    nodes: nodes
                });
            }
        }]);

        return Monitorable;
    }(Base);
};
//# sourceMappingURL=Monitorable.js.map