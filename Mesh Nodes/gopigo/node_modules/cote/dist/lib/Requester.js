'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('eventemitter2').EventEmitter2,
    util = require('util'),
    Configurable = require('./Configurable'),
    Component = require('./Component'),
    axon = require('@dashersw/axon'),
    portfinder = require('portfinder');

module.exports = function (_Configurable) {
    _inherits(Requester, _Configurable);

    function Requester(advertisement, discoveryOptions) {
        _classCallCheck(this, Requester);

        var _this = _possibleConstructorReturn(this, (Requester.__proto__ || Object.getPrototypeOf(Requester)).call(this, advertisement, discoveryOptions));

        var host = _this.discoveryOptions && _this.discoveryOptions.address || '0.0.0.0';

        var onPort = function onPort(err, port) {
            _this.advertisement.port = +port;

            _this.sock = new axon.ReqSocket();
            _this.sock.bind(port);
            _this.sock.server.on('error', function (err) {
                if (err.code != 'EADDRINUSE') throw err;

                portfinder.getPort({ host: host, port: _this.advertisement.port }, onPort.bind(_this));
            });

            _this.sock.on('bind', function (_) {
                return _this.emit('ready', _this.sock);
            });
        };

        portfinder.getPort({ host: host, port: _this.advertisement.port }, onPort.bind(_this));
        return _this;
    }

    _createClass(Requester, [{
        key: 'send',
        value: function send() {
            var _sock;

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            if (this.sock) (_sock = this.sock).send.apply(_sock, args);else console.log('trying to send ' + args + ' but not ready yet.');
        }
    }, {
        key: 'type',
        get: function get() {
            return 'req';
        }
    }, {
        key: 'oppo',
        get: function get() {
            return 'rep';
        }
    }]);

    return Requester;
}(Configurable(Component));
//# sourceMappingURL=Requester.js.map