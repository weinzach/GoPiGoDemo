{"version":3,"sources":["../../lib/Component.js"],"names":["EventEmitter","require","EventEmitter2","Discovery","module","exports","advertisement","discoveryOptions","wildcard","delimiter","newListener","maxListeners","key","constructor","environment","axon_type","type","discovery","on","onAdded","bind","onRemoved","stop","broadcast","socket","close","obj","oppo","namespace","emit","sock"],"mappings":";;;;;;;;;;AAAA,IAAIA,eAAeC,QAAQ,eAAR,EAAyBC,aAA5C;AACA,IAAIC,YAAYF,QAAQ,aAAR,CAAhB;;AAGAG,OAAOC,OAAP;AAAA;;AACI,uBAAYC,aAAZ,EAA2BC,gBAA3B,EAA6C;AAAA;;AAAA,0HACnC;AACFC,sBAAU,IADR,EACc;AAChBC,uBAAW,IAFT,EAEe;AACjBC,yBAAa,KAHX,EAGkB;AACpBC,0BAAc,IAJZ,CAIiB;AAJjB,SADmC;;AAQzCL,sBAAcM,GAAd,GAAoB,MAAKC,WAAL,CAAiBC,WAAjB,IAAgCR,cAAcM,GAAd,IAAqB,EAArD,CAApB;;AAEA,cAAKN,aAAL,GAAqBA,aAArB;AACA,cAAKA,aAAL,CAAmBS,SAAnB,GAA+B,MAAKC,IAApC;;AAEA,cAAKT,gBAAL,GAAwBA,oBAAoB,EAA5C;AACA,cAAKU,SAAL,GAAiBd,UAAU,MAAKG,aAAf,EAA8B,MAAKC,gBAAnC,CAAjB;;AAEA,cAAKU,SAAL,CAAeC,EAAf,CAAkB,OAAlB,EAA2B,MAAKC,OAAL,CAAaC,IAAb,OAA3B;AACA,cAAKH,SAAL,CAAeC,EAAf,CAAkB,SAAlB,EAA6B,MAAKG,SAAL,CAAeD,IAAf,OAA7B;AAjByC;AAkB5C;;AAnBL;AAAA;AAAA,gCAqBY;AACJ,gBAAI,CAAC,KAAKH,SAAV,EAAqB;;AAErB,iBAAKA,SAAL,CAAeK,IAAf;;AAEA,iBAAKL,SAAL,CAAeM,SAAf,IACI,KAAKN,SAAL,CAAeM,SAAf,CAAyBC,MAD7B,IAEI,KAAKP,SAAL,CAAeM,SAAf,CAAyBC,MAAzB,CAAgCC,KAAhC,EAFJ;AAGH;AA7BL;AAAA;AAAA,gCA+BYC,GA/BZ,EA+BiB;AACT,gBAAIA,IAAIpB,aAAJ,CAAkBS,SAAlB,IAA+B,KAAKY,IAAxC,EAA8C;AAC9C,gBAAID,IAAIpB,aAAJ,CAAkBM,GAAlB,IAAyB,KAAKN,aAAL,CAAmBM,GAAhD,EAAqD;AACrD,gBAAI,KAAKN,aAAL,CAAmBsB,SAAnB,IAAgCF,IAAIpB,aAAJ,CAAkBsB,SAAtD,EAAiE;;AAEjE,iBAAKC,IAAL,CAAU,OAAV,EAAmBH,GAAnB;AACH;AArCL;AAAA;AAAA,kCAuCcA,GAvCd,EAuCmB;AACX,gBAAIA,IAAIpB,aAAJ,CAAkBS,SAAlB,IAA+B,KAAKY,IAAxC,EAA8C;AAC9C,gBAAID,IAAIpB,aAAJ,CAAkBM,GAAlB,IAAyB,KAAKN,aAAL,CAAmBM,GAAhD,EAAqD;AACrD,gBAAI,KAAKN,aAAL,CAAmBsB,SAAnB,IAAgCF,IAAIpB,aAAJ,CAAkBsB,SAAtD,EAAiE;;AAEjEF,mBAAOA,IAAII,IAAX,IAAmBJ,IAAII,IAAJ,CAASL,KAAT,EAAnB;AACA,iBAAKI,IAAL,CAAU,SAAV,EAAqBH,GAArB;AACH;AA9CL;;AAAA;AAAA,EAAyC1B,YAAzC","file":"Component.js","sourcesContent":["var EventEmitter = require('eventemitter2').EventEmitter2;\nvar Discovery = require('./Discovery');\n\n\nmodule.exports = class Component extends EventEmitter {\n    constructor(advertisement, discoveryOptions) {\n        super({\n            wildcard: true, // should the event emitter use wildcards.\n            delimiter: '::', // the delimiter used to segment namespaces, defaults to `.`.\n            newListener: false, // if you want to emit the newListener event set to true.\n            maxListeners: 2000 // the max number of listeners that can be assigned to an event, defaults to 10.\n        });\n\n        advertisement.key = this.constructor.environment + (advertisement.key || '');\n\n        this.advertisement = advertisement;\n        this.advertisement.axon_type = this.type;\n\n        this.discoveryOptions = discoveryOptions || {};\n        this.discovery = Discovery(this.advertisement, this.discoveryOptions);\n\n        this.discovery.on('added', this.onAdded.bind(this));\n        this.discovery.on('removed', this.onRemoved.bind(this));\n    }\n\n    close() {\n        if (!this.discovery) return;\n\n        this.discovery.stop();\n\n        this.discovery.broadcast &&\n            this.discovery.broadcast.socket &&\n            this.discovery.broadcast.socket.close();\n    }\n\n    onAdded(obj) {\n        if (obj.advertisement.axon_type != this.oppo) return;\n        if (obj.advertisement.key != this.advertisement.key) return;\n        if (this.advertisement.namespace != obj.advertisement.namespace) return;\n\n        this.emit('added', obj);\n    }\n\n    onRemoved(obj) {\n        if (obj.advertisement.axon_type != this.oppo) return;\n        if (obj.advertisement.key != this.advertisement.key) return;\n        if (this.advertisement.namespace != obj.advertisement.namespace) return;\n\n        obj && obj.sock && obj.sock.close();\n        this.emit('removed', obj);\n    }\n}\n"]}