'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _logSuppress = require('log-suppress');

var _logSuppress2 = _interopRequireDefault(_logSuppress);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cote = require('..')();

_logSuppress2.default.init(console);

_ava2.default.cb('classic request / responder', function (t) {
    var key = 'test 1';

    var requester = new cote.Requester({ name: 'requester', key: key });
    var responder = new cote.Responder({ name: 'responder', key: key });

    requester.on('ready', function () {
        requester.send({ type: 'test', args: [1, 2, 3] });
    });

    responder.on('test', function (req) {
        t.deepEqual(req.args, [1, 2, 3], 'Arguments should have been [1, 2, 3]');
        t.end();
    });
});

_ava2.default.cb('Environment test', function (t) {
    var key = 'test 2';

    var cote = require('..')({ environment: 'test' });

    var requester = new cote.Requester({ name: 'requester', key: key });
    var responder = new cote.Responder({ name: 'responder', key: key });

    requester.on('ready', function () {
        requester.send({ type: 'test', args: [1, 2, 3] });
    });

    responder.on('test', function (req) {
        t.deepEqual(req.args, [1, 2, 3], 'Arguments should have been [1, 2, 3]');
        t.is(cote.Requester.environment, 'test:');
        t.end();
    });
});
//# sourceMappingURL=request-response.js.map