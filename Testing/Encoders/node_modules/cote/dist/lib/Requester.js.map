{"version":3,"sources":["../../lib/Requester.js"],"names":["EventEmitter","require","EventEmitter2","util","Configurable","Component","axon","portfinder","module","exports","advertisement","discoveryOptions","host","address","onPort","err","port","sock","ReqSocket","bind","server","on","code","getPort","emit","args","send","console","log"],"mappings":";;;;;;;;;;AAAA,IAAIA,eAAeC,QAAQ,eAAR,EAAyBC,aAA5C;AAAA,IACIC,OAAOF,QAAQ,MAAR,CADX;AAAA,IAEIG,eAAeH,QAAQ,gBAAR,CAFnB;AAAA,IAGII,YAAYJ,QAAQ,aAAR,CAHhB;AAAA,IAIIK,OAAOL,QAAQ,gBAAR,CAJX;AAAA,IAKIM,aAAaN,QAAQ,YAAR,CALjB;;AAOAO,OAAOC,OAAP;AAAA;;AACI,uBAAYC,aAAZ,EAA2BC,gBAA3B,EAA6C;AAAA;;AAAA,0HACnCD,aADmC,EACpBC,gBADoB;;AAGzC,YAAIC,OAAO,MAAKD,gBAAL,IAAyB,MAAKA,gBAAL,CAAsBE,OAA/C,IAA0D,SAArE;;AAEA,YAAIC,SAAS,SAATA,MAAS,CAACC,GAAD,EAAMC,IAAN,EAAe;AACxB,kBAAKN,aAAL,CAAmBM,IAAnB,GAA0B,CAACA,IAA3B;;AAEA,kBAAKC,IAAL,GAAY,IAAIX,KAAKY,SAAT,EAAZ;AACA,kBAAKD,IAAL,CAAUE,IAAV,CAAeH,IAAf;AACA,kBAAKC,IAAL,CAAUG,MAAV,CAAiBC,EAAjB,CAAoB,OAApB,EAA6B,eAAO;AAChC,oBAAIN,IAAIO,IAAJ,IAAY,YAAhB,EAA8B,MAAMP,GAAN;;AAE9BR,2BAAWgB,OAAX,CAAmB,EAAEX,MAAMA,IAAR,EAAcI,MAAM,MAAKN,aAAL,CAAmBM,IAAvC,EAAnB,EAAkEF,OAAOK,IAAP,OAAlE;AACH,aAJD;;AAMA,kBAAKF,IAAL,CAAUI,EAAV,CAAa,MAAb,EAAqB;AAAA,uBAAK,MAAKG,IAAL,CAAU,OAAV,EAAmB,MAAKP,IAAxB,CAAL;AAAA,aAArB;AACH,SAZD;;AAcAV,mBAAWgB,OAAX,CAAmB,EAAEX,MAAMA,IAAR,EAAcI,MAAM,MAAKN,aAAL,CAAmBM,IAAvC,EAAnB,EAAkEF,OAAOK,IAAP,OAAlE;AAnByC;AAoB5C;;AArBL;AAAA;AAAA,+BAuBkB;AAAA;;AAAA,8CAANM,IAAM;AAANA,oBAAM;AAAA;;AACV,gBAAI,KAAKR,IAAT,EAAe,cAAKA,IAAL,EAAUS,IAAV,cAAkBD,IAAlB,EAAf,KACKE,QAAQC,GAAR,qBAA8BH,IAA9B;AACR;AA1BL;AAAA;AAAA,4BA4Be;AAAE,mBAAO,KAAP;AAAe;AA5BhC;AAAA;AAAA,4BA6Be;AAAE,mBAAO,KAAP;AAAe;AA7BhC;;AAAA;AAAA,EAAyCrB,aAAaC,SAAb,CAAzC","file":"Requester.js","sourcesContent":["var EventEmitter = require('eventemitter2').EventEmitter2,\n    util = require('util'),\n    Configurable = require('./Configurable'),\n    Component = require('./Component'),\n    axon = require('@dashersw/axon'),\n    portfinder = require('portfinder');\n\nmodule.exports = class Requester extends Configurable(Component) {\n    constructor(advertisement, discoveryOptions) {\n        super(advertisement, discoveryOptions);\n\n        var host = this.discoveryOptions && this.discoveryOptions.address || '0.0.0.0';\n\n        var onPort = (err, port) => {\n            this.advertisement.port = +port;\n\n            this.sock = new axon.ReqSocket();\n            this.sock.bind(port);\n            this.sock.server.on('error', err => {\n                if (err.code != 'EADDRINUSE') throw err;\n\n                portfinder.getPort({ host: host, port: this.advertisement.port }, onPort.bind(this));\n            });\n\n            this.sock.on('bind', _ => this.emit('ready', this.sock));\n        }\n\n        portfinder.getPort({ host: host, port: this.advertisement.port }, onPort.bind(this));\n    }\n\n    send(...args) {\n        if (this.sock) this.sock.send(...args);\n        else console.log(`trying to send ${args} but not ready yet.`);\n    }\n\n    get type() { return 'req'; }\n    get oppo() { return 'rep'; }\n\n}\n"]}