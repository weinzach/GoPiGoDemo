{"version":3,"sources":["../../lib/Monitorable.js"],"names":["module","exports","args","discovery","on","adv","obj","advertisement","type","key","statusPublisher","axon","PubEmitterSocket","connect","port","constructor","useHostNames","hostName","address","statusInterval","discoveryOptions","setInterval","onInterval","nodes","id","node","sock","push","emit","me","Base"],"mappings":";;;;;;;;;;AAAAA,OAAOC,OAAP,GAAiB;AAAA;AAAA;;AACb,+BAAqB;AAAA;;AAAA;;AAAA,8CAANC,IAAM;AAANA,oBAAM;AAAA;;AAAA,6JACRA,IADQ;;AAEjB,kBAAKC,SAAL,CAAeC,EAAf,CAAkB,OAAlB,EAA2B,eAAO;AAC9B,oBAAIC,MAAMC,IAAIC,aAAd;;AAEA,oBAAIF,IAAIG,IAAJ,IAAY,SAAhB,EAA2B;;AAE3B,oBAAIH,IAAII,GAAJ,IAAWJ,IAAII,GAAJ,IAAW,MAAKF,aAAL,CAAmBE,GAA7C,EAAkD;;AAElD,oBAAIC,kBAAkB,IAAIC,KAAKC,gBAAT,EAAtB;AACAF,gCAAgBG,OAAhB,CAAwBR,IAAIS,IAA5B,EAAkC,MAAKC,WAAL,CAAiBC,YAAjB,GAAgCV,IAAIW,QAApC,GAA+CX,IAAIY,OAArF;AACA,oBAAIC,iBAAiB,MAAKC,gBAAL,IAAyB,MAAKA,gBAAL,CAAsBD,cAA/C,IAAiE,IAAtF;;AAEAE,4BAAY;AAAA,2BAAK,MAAKC,UAAL,EAAL;AAAA,iBAAZ,EAAoCH,cAApC;AACH,aAZD;AAFiB;AAepB;;AAhBY;AAAA;AAAA,yCAkBA;AACT,oBAAII,QAAQ,EAAZ;;AAEA,qBAAK,IAAIC,EAAT,IAAe,KAAKrB,SAAL,CAAeoB,KAA9B,EAAqC;AACjC,wBAAIE,OAAO,KAAKtB,SAAL,CAAeoB,KAAf,CAAqBC,EAArB,CAAX;;AAEA,wBAAIC,KAAKC,IAAT,EACIH,MAAMI,IAAN,CAAWH,EAAX;AACP;;AAEDd,gCAAgBkB,IAAhB,CAAqB,QAArB,EAA+B;AAC3BJ,wBAAI,KAAKrB,SAAL,CAAe0B,EAAf,CAAkBL,EADK;AAE3BD,2BAAOA;AAFoB,iBAA/B;AAIH;AAhCY;;AAAA;AAAA,MAAkCO,IAAlC;AAAA,CAAjB","file":"Monitorable.js","sourcesContent":["module.exports = Base => class Monitorable extends Base {\n    constructor(...args) {\n        super(...args);\n        this.discovery.on('added', obj => {\n            var adv = obj.advertisement;\n\n            if (adv.type != 'monitor') return;\n\n            if (adv.key && adv.key != this.advertisement.key) return;\n\n            var statusPublisher = new axon.PubEmitterSocket();\n            statusPublisher.connect(adv.port, this.constructor.useHostNames ? obj.hostName : obj.address);\n            var statusInterval = this.discoveryOptions && this.discoveryOptions.statusInterval || 5000;\n\n            setInterval(_ => this.onInterval(), statusInterval);\n        });\n    }\n\n    onInterval() {\n        var nodes = [];\n\n        for (var id in this.discovery.nodes) {\n            var node = this.discovery.nodes[id];\n\n            if (node.sock)\n                nodes.push(id);\n        }\n\n        statusPublisher.emit('status', {\n            id: this.discovery.me.id,\n            nodes: nodes\n        });\n    }\n}\n"]}