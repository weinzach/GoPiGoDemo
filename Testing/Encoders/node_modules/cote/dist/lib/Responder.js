'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('eventemitter2').EventEmitter2,
    util = require('util'),
    Discovery = require('./Discovery'),
    Configurable = require('./Configurable'),
    Monitorable = require('./Monitorable'),
    Component = require('./Component'),
    axon = require('@dashersw/axon');

module.exports = function (_Monitorable) {
    _inherits(Responder, _Monitorable);

    function Responder(advertisement, discoveryOptions) {
        _classCallCheck(this, Responder);

        var _this = _possibleConstructorReturn(this, (Responder.__proto__ || Object.getPrototypeOf(Responder)).call(this, advertisement, discoveryOptions));

        _this.on('added', function (obj) {
            obj.sock = new axon.RepSocket();
            obj.sock.connect(obj.advertisement.port, Responder.useHostNames ? obj.hostName : obj.address);
            obj.sock.set('retry timeout', 0);

            obj.sock.on('socket close', function (_) {
                return _this.emit('removed', obj);
            });

            obj.sock.on('message', function (req, cb) {
                return req.type && _this.emit(req.type, req, cb);
            });
        });
        return _this;
    }

    _createClass(Responder, [{
        key: 'type',
        get: function get() {
            return 'rep';
        }
    }, {
        key: 'oppo',
        get: function get() {
            return 'req';
        }
    }]);

    return Responder;
}(Monitorable(Configurable(Component)));
//# sourceMappingURL=Responder.js.map